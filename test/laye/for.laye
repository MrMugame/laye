// R %layec --ir %s

// * define layecc forever() {
// + entry:
// + }
noreturn forever() {
    for { }
}

// * define layecc forever_cfor() {
// + entry:
// + }
noreturn forever_cfor() {
    for (;;) { }
}

// * define layecc noinit() {
// + entry:
// + }
int noinit() {
    int mut accum = 0;
    int mut i = 0;
    for (; i < 10; i = i + 1) {
        accum = accum + i;
    }
    return accum;
}

// * define layecc noinc() {
// + entry:
// + }
int noinc() {
    int mut accum = 0;
    for (int mut i = 0; i < 10; ) {
        accum = accum + i;
        i = i + 1;
    }
    return accum;
}

// * define layecc nocondition() {
// + entry:
// + }
noreturn nocondition() {
    for (int mut i = 0; ; i = i + 1) {
    }
}

// * define layecc condition() -> int64 {
// + entry:
// + }
int condition() {
    int mut accum = 0;
    for (accum < 10) {
        accum = accum + 1;
    }
    return accum;
}

// * define layecc cfor() -> int64 {
// + entry:
// + }
int cfor() {
    int mut accum = 0;
    for (int mut i = 0; i < 10; i = i + 1) {
        accum = accum + i;
    }
    return accum;
}

// * define layecc foreach() {
// + entry:
// + }
void foreach() {
    int mut[10] arr;
    for (enum i, v : arr) {
        v = i;
    }
}

// * define exported ccc main() -> int64 {
// + entry:
// +   %0 = call int64 @cfor()
// +   %1 = call int64 @condition()
// +   %2 = sub int64 %0, %1
// +   return int64 %2
// + }
int main() {
    return cfor() - condition();
}
